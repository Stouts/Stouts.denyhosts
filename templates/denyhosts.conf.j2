# This file was generated by Ansible for {{ ansible_fqdn }}
# Do NOT modify this file by hand!

       ############ THESE SETTINGS ARE REQUIRED ############

########################################################################
#
# SECURE_LOG: the log file that contains sshd logging info
# if you are not sure, grep "sshd:" /var/log/*
#
SECURE_LOG = {{ denyhosts_secure_log }}
########################################################################

########################################################################
#
# HOSTS_DENY: the file which contains restricted host access information
#
HOSTS_DENY = {{ denyhosts_hosts_deny }}
#######################################################################

########################################################################
#
# PURGE_DENY: removed HOSTS_DENY entries that are older than this time
#             when DenyHosts is invoked with the --purge flag
#
PURGE_DENY = {{ denyhosts_purge_deny }}
#######################################################################

#######################################################################
#
# PURGE_THRESHOLD: defines the maximum times a host will be purged.
# Once this value has been exceeded then this host will not be purged.
# Setting this parameter to 0 (the default) disables this feature.
#
PURGE_THRESHOLD = {{ denyhosts_purge_threshold }}
#######################################################################

#######################################################################
#
# BLOCK_SERVICE: the service name that should be blocked in HOSTS_DENY
#
BLOCK_SERVICE = {{ denyhosts_block_service }}
#######################################################################

#######################################################################
#
# DENY_THRESHOLD_INVALID: block each host after the number of failed login
# attempts has exceeded this value.  This value applies to invalid
# user login attempts (eg. non-existent user accounts)
#
DENY_THRESHOLD_INVALID = {{ denyhosts_deny_threshold_invalid }}
#######################################################################

#######################################################################
#
# DENY_THRESHOLD_VALID: block each host after the number of failed
# login attempts has exceeded this value.  This value applies to valid
# user login attempts (eg. user accounts that exist in /etc/passwd) except
# for the "root" user
#
DENY_THRESHOLD_VALID = {{ denyhosts_deny_threshold_valid }}
#######################################################################

#######################################################################
#
# DENY_THRESHOLD_ROOT: block each host after the number of failed
# login attempts has exceeded this value.  This value applies to
# "root" user login attempts only.
#
DENY_THRESHOLD_ROOT = {{ denyhosts_deny_threshold_root }}
#######################################################################

#######################################################################
#
# DENY_THRESHOLD_RESTRICTED: block each host after the number of failed
# login attempts has exceeded this value.  This value applies to
# usernames that appear in the WORK_DIR/restricted-usernames file only.
#
DENY_THRESHOLD_RESTRICTED = {{ denyhosts_deny_threshold_restricted }}
#######################################################################

#######################################################################
#
# WORK_DIR: the path that DenyHosts will use for writing data to
# (it will be created if it does not already exist).
#
WORK_DIR = {{ denyhosts_work_dir }}
#######################################################################

#######################################################################
#
# SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS:
# If set to YES, if a suspicious login attempt results from an allowed-host
# then it is considered suspicious.  If this is NO, then suspicious logins
# from allowed-hosts will not be reported.  All suspicious logins from
# ip addresses that are not in allowed-hosts will always be reported.
#
SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS = {{ 'YES' if denyhosts_suspicious_login_report_allowed_hosts else 'NO' }}
######################################################################

######################################################################
#
# HOSTNAME_LOOKUP:
# If set to YES, for each IP address that is reported by Denyhosts,
# the corresponding hostname will be looked up and reported as well
# (if available).
#
HOSTNAME_LOOKUP = {{ 'YES' if denyhosts_hostname_lookup else 'NO' }}
######################################################################

######################################################################
#
# LOCK_FILE:
# If this file exists when DenyHosts is run, then DenyHosts will exit
# immediately.  Otherwise, this file will be created upon invocation
# and deleted upon exit.  This ensures that only one instance is
# running at a time.
#
LOCK_FILE = {{ denyhosts_lock_file }}
######################################################################


       ############ THESE SETTINGS ARE OPTIONAL ############


#######################################################################
#
# ADMIN_EMAIL: if you would like to receive emails regarding newly
# restricted hosts and suspicious logins, set this address to
# match your email address.  If you do not want to receive these reports
# leave this field blank (or run with the --noemail option)
#
{% if denyhosts_admin_email is defined %}
{% if denyhosts_admin_email is string %}
ADMIN_EMAIL = {{ denyhosts_admin_email }}
{% else %}
ADMIN_EMAIL = {{ denyhosts_admin_email|join(',') }}
{% endif %}
{% endif %}
#######################################################################

#######################################################################
#
# SMTP_HOST and SMTP_PORT: if DenyHosts is configured to email
# reports (see ADMIN_EMAIL) then these settings specify the
# email server address (SMTP_HOST) and the server port (SMTP_PORT)
#
SMTP_HOST = {{ denyhosts_smtp_host }}
SMTP_PORT = {{ denyhosts_smtp_port }}
#######################################################################

#######################################################################
#
# SMTP_USERNAME and SMTP_PASSWORD: set these parameters if your
# smtp email server requires authentication
#
{% if denyhosts_smtp_username != "" %}
SMTP_USERNAME = {{ denyhosts_smtp_username }}
{% endif %}
{% if denyhosts_smtp_password != "" %}
SMTP_PASSWORD = {{ denyhosts_smtp_password }}
{% endif %}
######################################################################

#######################################################################
#
# SMTP_FROM: you can specify the "From:" address in messages sent
# from DenyHosts when it reports thwarted abuse attempts
#
SMTP_FROM = {{ denyhosts_smtp_from }}
#######################################################################

#######################################################################
#
# SMTP_SUBJECT: you can specify the "Subject:" of messages sent
# by DenyHosts when it reports thwarted abuse attempts
#
SMTP_SUBJECT = {{ denyhosts_smtp_subject }}
######################################################################

######################################################################
#
# SMTP_DATE_FORMAT: specifies the format used for the "Date:" header
# when sending email messages.
#
SMTP_DATE_FORMAT = {{ denyhosts_smtp_date_format }}
######################################################################

######################################################################
#
# SYSLOG_REPORT:
# If set to yes, when denied hosts are recorded the report data
# will be sent to syslog (syslog must be present on your system).
#
SYSLOG_REPORT = {{ 'YES' if denyhosts_syslog_report else 'NO' }}
######################################################################

######################################################################
#
# ALLOWED_HOSTS_HOSTNAME_LOOKUP:
# If set to YES, for each entry in the WORK_DIR/allowed-hosts file,
# the hostname will be looked up.  If your versions of tcp_wrappers
# and sshd sometimes log hostnames in addition to ip addresses
# then you may wish to specify this option.
#
ALLOWED_HOSTS_HOSTNAME_LOOKUP = {{ 'YES' if denyhosts_allowed_hosts_hostname_lookup else 'NO' }}
######################################################################

######################################################################
#
# AGE_RESET_VALID: Specifies the period of time between failed login
# attempts that, when exceeded will result in the failed count for
# this host to be reset to 0.  This value applies to login attempts
# to all valid users (those within /etc/passwd) with the
# exception of root.  If not defined, this count will never
# be reset.
#
{% if denyhosts_age_reset_valid is defined %}
AGE_RESET_VALID = {{ denyhosts_age_reset_valid }}
{% endif %}
######################################################################

######################################################################
#
# AGE_RESET_ROOT: Specifies the period of time between failed login
# attempts that, when exceeded will result in the failed count for
# this host to be reset to 0.  This value applies to all login
# attempts to the "root" user account.  If not defined,
# this count will never be reset.
#
{% if denyhosts_age_reset_root is defined %}
AGE_RESET_ROOT = {{ denyhosts_age_reset_root }}
{% endif %}
######################################################################

######################################################################
#
# AGE_RESET_RESTRICTED: Specifies the period of time between failed login
# attempts that, when exceeded will result in the failed count for
# this host to be reset to 0.  This value applies to all login
# attempts to entries found in the WORK_DIR/restricted-usernames file.
# If not defined, the count will never be reset.
#
{% if denyhosts_age_reset_restricted is defined %}
AGE_RESET_RESTRICTED = {{ denyhosts_age_reset_restricted }}
{% endif %}
######################################################################

######################################################################
#
# AGE_RESET_INVALID: Specifies the period of time between failed login
# attempts that, when exceeded will result in the failed count for
# this host to be reset to 0.  This value applies to login attempts
# made to any invalid username (those that do not appear
# in /etc/passwd).  If not defined, count will never be reset.
#
{% if denyhosts_age_reset_invalid is defined %}
AGE_RESET_INVALID = {{ denyhosts_age_reset_invalid }}
{% endif %}
######################################################################

######################################################################
#
# RESET_ON_SUCCESS: If this parameter is set to "yes" then the
# failed count for the respective ip address will be reset to 0
# if the login is successful.
#
RESET_ON_SUCCESS = {{ 'YES' if denyhosts_reset_on_success else 'NO' }}
#####################################################################

######################################################################
#
# PLUGIN_DENY: If set, this value should point to an executable
# program that will be invoked when a host is added to the
# HOSTS_DENY file.  This executable will be passed the host
# that will be added as its only argument.
#
{% if denyhosts_plugin_deny %}
PLUGIN_DENY = {{ denyhosts_plugin_deny }}
{% endif %}
######################################################################

######################################################################
#
# PLUGIN_PURGE: If set, this value should point to an executable
# program that will be invoked when a host is removed from the
# HOSTS_DENY file.  This executable will be passed the host
# that is to be purged as its only argument.
#
{% if denyhosts_plugin_purge %}
PLUGIN_PURGE = {{ denyhosts_plugin_purge }}
{% endif %}
######################################################################

######################################################################
#
# USERDEF_FAILED_ENTRY_REGEX: if set, this value should contain
# a regular expression that can be used to identify additional
# hackers for your particular ssh configuration.  This functionality
# extends the built-in regular expressions that DenyHosts uses.
#
{% if denyhosts_userdef_failed_entry_regex %}
{% if denyhosts_userdef_failed_entry_regex is string %}
USERDEF_FAILED_ENTRY_REGEX = {{ denyhosts_userdef_failed_entry_regex }}
{% else %}
{% for regex in denyhosts_userdef_failed_entry_regex %}
USERDEF_FAILED_ENTRY_REGEX = {{ regex }}
{% endfor %}
{% endif %}
{% endif %}
######################################################################


   ######### THESE SETTINGS ARE SPECIFIC TO DAEMON MODE  ##########


#######################################################################
#
# DAEMON_LOG: when DenyHosts is run in daemon mode (--daemon flag)
# this is the logfile that DenyHosts uses to report its status.
# To disable logging, leave blank.  (default is: /var/log/denyhosts)
#
DAEMON_LOG = {{ denyhosts_daemon_log }}
######################################################################

#######################################################################
#
# DAEMON_LOG_TIME_FORMAT: when DenyHosts is run in daemon mode
# (--daemon flag) this specifies the timestamp format of
# the DAEMON_LOG messages.
#
{% if denyhosts_daemon_log_time_format %}
DAEMON_LOG_TIME_FORMAT = {{ denyhosts_daemon_log_time_format }}
{% endif %}
######################################################################

#######################################################################
#
# DAEMON_LOG_MESSAGE_FORMAT: when DenyHosts is run in daemon mode
# (--daemon flag) this specifies the message format of each logged
# entry.
#
{% if denyhosts_daemon_log_message_format %}
DAEMON_LOG_MESSAGE_FORMAT = {{ denyhosts_daemon_log_message_format }}
{% endif %}
######################################################################

#######################################################################
#
# DAEMON_SLEEP: when DenyHosts is run in daemon mode (--daemon flag)
# this is the amount of time DenyHosts will sleep between polling
# the SECURE_LOG.
#
DAEMON_SLEEP = {{ denyhosts_daemon_sleep }}
#######################################################################

#######################################################################
#
# DAEMON_PURGE: How often should DenyHosts, when run in daemon mode,
# run the purge mechanism to expire old entries in HOSTS_DENY
# This has no effect if PURGE_DENY is blank.
#
DAEMON_PURGE = {{ denyhosts_daemon_purge }}
#######################################################################


   #########   THESE SETTINGS ARE SPECIFIC TO     ##########
   #########       DAEMON SYNCHRONIZATION         ##########


#######################################################################
#
# Synchronization mode allows the DenyHosts daemon the ability
# to periodically send and receive denied host data such that
# DenyHosts daemons worldwide can automatically inform one
# another regarding banned hosts.   This mode is disabled by
# default, you must uncomment SYNC_SERVER to enable this mode.
#
#######################################################################

#######################################################################
#
# SYNC_SERVER: The central server that communicates with DenyHost
# daemons.  Currently, denyhosts.net is the only available server
# however, in the future, it may be possible for organizations to
# install their own server for internal network synchronization
#
{% if denyhosts_sync_server != "" %}
SYNC_SERVER = http://xmlrpc.denyhosts.net:9911
{% endif %}
#######################################################################

#######################################################################
#
# SYNC_INTERVAL: the interval of time to perform synchronizations if
# SYNC_SERVER has been uncommented.  The default is 1 hour.
#
SYNC_INTERVAL = {{ denyhosts_sync_interval }}
#######################################################################

#######################################################################
#
# SYNC_UPLOAD: allow your DenyHosts daemon to transmit hosts that have
# been denied?  This option only applies if SYNC_SERVER has
# been uncommented.
#
SYNC_UPLOAD = {{ 'YES' if denyhosts_sync_upload else 'NO' }}
#######################################################################

#######################################################################
#
# SYNC_DOWNLOAD: allow your DenyHosts daemon to receive hosts that have
# been denied by others?  This option only applies if SYNC_SERVER has
# been uncommented.
#
SYNC_DOWNLOAD = {{ 'YES' if denyhosts_sync_download else 'NO' }}
#######################################################################

#######################################################################
#
# SYNC_DOWNLOAD_THRESHOLD: If SYNC_DOWNLOAD is enabled this parameter
# filters the returned hosts to those that have been blocked this many
# times by others.  That is, if set to 1, then if a single DenyHosts
# server has denied an ip address then you will receive the denied host.
#
SYNC_DOWNLOAD_THRESHOLD = {{ denyhosts_sync_download_threshold }}
#######################################################################

#######################################################################
#
# SYNC_DOWNLOAD_RESILIENCY:  If SYNC_DOWNLOAD is enabled then the
# value specified for this option limits the downloaded data
# to this resiliency period or greater.
#
# Resiliency is defined as the timespan between a hackers first known
# attack and its most recent attack.  Example:
#
# If the centralized   denyhosts.net server records an attack at 2 PM
# and then again at 5 PM, specifying a SYNC_DOWNLOAD_RESILIENCY = 4h
# will not download this ip address.
#
# However, if the attacker is recorded again at 6:15 PM then the
# ip address will be downloaded by your DenyHosts instance.
#
# This value is used in conjunction with the SYNC_DOWNLOAD_THRESHOLD
# and only hosts that satisfy both values will be downloaded.
# This value has no effect if SYNC_DOWNLOAD_THRESHOLD = 1
#
SYNC_DOWNLOAD_RESILIENCY = {{ denyhosts_sync_download_resiliency }}
#######################################################################
